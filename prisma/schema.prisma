generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                   Int       @id @default(autoincrement())
  email                String    @unique
  name                 String?
  password             String
  verifyAccountOtp     String?
  verifyAccountExpires DateTime?
  isVerified           Boolean   @default(false)
  otps                 Otp[]     @relation("UserOtp")
  createdAt            DateTime  @default(now())
  designation          String?   // Already added
  profilePic      String?   // New field for storing profile image URL
}


model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  user      User?    @relation("UserOtp", fields: [userId], references: [id])
  userId    Int?
}

model Employee {
  id               Int         @id @default(autoincrement())
  profilePic       String?
  firstName        String?
  lastName         String?
  mobileNumber     String?
  emailAddress     String?     @unique
  dateOfBirth      DateTime?   @default(now())
  maritalStatus    String?
  gender           String?
  nationality      String?
  address          String?
  city             String?
  teamId           Int?        
  state            String?
  zipCode          String?
  workingDays      Int?
  startDate        DateTime?
  officeLocation   String?
  offerLetter      String?
  payrollSlip      String?
  cv               String?
  meansOfId        String?
  
  teams            Team?       @relation("EmployeeTeam", fields: [teamId], references: [id], map: "EmployeeTeam_FK")
  
  departmentId     Int?       
  department       Department? @relation("DepartmentEmployees", fields: [departmentId], references: [id], map: "EmployeeDepartment_FK")
  
  departmentHeadOf Department? @relation("DepartmentHeads")
  
  rewards          Reward[]    @relation("EmployeeRewards")
  
  teamLead         Team?       @relation("TeamLead")
  
  attendance       Attendance[] @relation("EmployeeAttendance")
  
  schedules        ScheduleParticipants[] @relation("EmployeeSchedules") // Relation name added
  
  createdAt        DateTime?    @default(now())
  responses   SurveyResponse[]  @relation("EmployeeResponses") // Relation to SurveyResponse

}

model Department {
  id               Int        @id @default(autoincrement())
  name             String
  teams            Team[]     @relation("TeamDepartment")
  
  departmentHeadId Int?       @unique 
  departmentHead   Employee?   @relation("DepartmentHeads", fields: [departmentHeadId], references: [id], map: "DepartmentHead_FK")
  
  employees        Employee[]  @relation("DepartmentEmployees")
  
  rewards          Reward[]    @relation("DepartmentRewards")
  
  createdAt       DateTime    @default(now())
}

model Team {
  id           Int         @id @default(autoincrement())
  name         String
  department   Department? @relation("TeamDepartment", fields: [departmentId], references: [id], map: "TeamDepartment_FK")
  departmentId Int?
  teamLead     Employee?   @relation("TeamLead", fields: [teamLeadId], references: [id], map: "TeamLead_FK")
  teamLeadId   Int?        @unique
  employees    Employee[]  @relation("EmployeeTeam")
  attendances  Attendance[] @relation("TeamAttendance")
  createdAt    DateTime    @default(now())
}

model Reward {
  id           Int         @id @default(autoincrement())
  employeeId   Int?
  earnedDate   DateTime?   @default(now())
  departmentId Int?
  categoryId   Int?
  pointsEarned Int?
  progress     Float?
  department   Department? @relation("DepartmentRewards", fields: [departmentId], references: [id], map: "RewardDepartment_FK")
  category     Category?   @relation("RewardCategory", fields: [categoryId], references: [id], map: "RewardCategory_FK")
  employee     Employee?   @relation("EmployeeRewards", fields: [employeeId], references: [id], map: "RewardEmployee_FK")
  createdAt    DateTime    @default(now())
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  rewards     Reward[] @relation("RewardCategory")
  createdAt   DateTime @default(now())
}

model Attendance {
  id           Int       @id @default(autoincrement())
  checkIn      DateTime   @default(now())
  teamId       Int?
  team         Team?      @relation("TeamAttendance", fields: [teamId], references: [id], map: "AttendanceTeam_FK")
  status       String     // E.g., Present, Absent, Late
  type         String     // E.g., Full-time, Part-time, etc.
  employeeId   Int
  employee     Employee   @relation("EmployeeAttendance", fields: [employeeId], references: [id], map: "AttendanceEmployee_FK")
  createdAt    DateTime   @default(now())
}

model Schedule {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  participants ScheduleParticipants[] @relation("ScheduleParticipantsRelation") // Relation for ScheduleParticipants
}

model ScheduleParticipants {
  scheduleId   Int
  employeeId   Int

  Schedule      Schedule   @relation("ScheduleParticipantsRelation", fields: [scheduleId], references: [id], map: "ScheduleParticipant_Schedule_FK")                                                              
  Employee      Employee   @relation("EmployeeSchedules", fields: [employeeId], references: [id], map: "ScheduleParticipant_Employee_FK")

  @@id([scheduleId, employeeId]) // Composite key for many-to-many relationship with employees 
}
    
model Announcement {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    date        DateTime
    isPinned    Boolean   @default(false) // Whether the announcement is pinned
    createdAt   DateTime  @default(now()) 
}
model Survey {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  category       SurveyCategory
  questions      SurveyQuestion[] @relation("SurveyQuestions")
  sentToEmails   String[]         @default([]) 
  completedCount Int              @default(0) // Track how many have completed the survey
  seenCount      Int              @default(0) // Track how many have completed the survey
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  responses      SurveyResponse[]  @relation("SurveyResponses") // Relation to SurveyResponse

}

model SurveyQuestion {
  id         Int              @id @default(autoincrement())
  survey     Survey           @relation("SurveyQuestions", fields: [surveyId], references: [id])
  surveyId   Int
  text       String
  type       QuestionType
  options    String[] 
  responses  SurveyResponse[]  @relation("QuestionResponses") // Link to SurveyResponse
}

model SurveyResponse {
  id            Int       @id @default(autoincrement())
  surveyId      Int
  employeeEmail String    // Store the email of the employee
  response      String[]
  createdAt     DateTime  @default(now())

  // Define relationships
  survey        Survey     @relation("SurveyResponses", fields: [surveyId], references: [id], onDelete: Cascade) // Link to Survey
  employee      Employee   @relation("EmployeeResponses", fields: [employeeEmail], references: [emailAddress], onDelete: Cascade) // Link to Employee
  question      SurveyQuestion? @relation("QuestionResponses", fields: [questionId], references: [id]) // Optional relation to SurveyQuestion
  questionId    Int?  // Optional foreign key to SurveyQuestion
}

// Define your enums as needed
enum SurveyCategory {
  LEAD_TO_LEAD
  LEAD_TO_EMPLOYEE
  EMPLOYEE_TO_LEAD
  EMPLOYEE_TO_EMPLOYEE
  EMPLOYEE_TO_COMPANY
}

enum QuestionType {
  TEXT
  RADIO
  CHECKBOX
  SCALE
}
